spring-boot学习地址:  https://github.com/ityouknow
http://blog.didispace.com/tags/Spring-Boot/page/4/





地址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743858312764dca7ad6d0754f76aa562e3789478044000


https://github.com/注册的账号 邮箱 密码：
gitlip1957
2233193308@qq.com
lip******
创建的仓库地址
https://github.com/gitlip1957/mygit.git


安装git：
Git”->“Git Bash”

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

通过git init命令把这个目录变成Git可以管理的仓库：
可以发现当前目录下多了一个.git的目录
没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见

添加文件到Git仓库，分两步：
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。
	
git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。

用git diff这个命令看看：上次怎么修改的readme.txt
	git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到
		

git log命令显示从最近到最远的提交日志（git commit -m <message>），我们可以看到3次提交，最近的一次是append GPL，上一次是add distributed，最早的一次是wrote a readme file。		
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	
	
	
版本回退
	git reset --hard HEAD^  回退上一个版本
	在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
	想再回去已经回不去了，肿么办？
	答：只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id
	
	Git提供了一个命令git reflog用来记录你的每一次命令：
	
	
	Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本
	
工作区与暂存区
	版本库（Repository）
	工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
	
	工作区：当前工作的目录
	暂存区：git add <file> 后文档暂存的地方
	分支区：git commit -m <message> 
	
管理修改
		为什么Git比其他版本控制系统设计得优秀？
		答：因为Git跟踪并管理的是修改，而非文件
		
撤销修改	
		git reset HEAD <file> 撤销暂存区的修改
		git checkout -- <file> 撤销工作区的修改
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		
删除文件
		 小提示：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。
		一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了。
		Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
		现在你有两个选择：
		一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit。
		另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt
		git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		注意：
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
		
		
		
远程仓库
		第1步：打开Shell（Windows下打开Git Bash），创建SSH Key：	
		ssh-keygen -t rsa -C "youremail@example.com"

    在本地的learngit仓库下运行命令：
		--先删除远程Git仓库 git remote rm origin
		--在添加
		git remote add origin git@github.com:gitlip1957/firstgit.git
	   请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。
	   添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库	
	
	下一步，就可以把本地库的所有内容推送到远程库上：
	   git push -u origin master
	   命令执行过程中需要输入yes

	   
从远程库克隆
	git clone git@github.com:gitlip1957/firstgit.git
	
	
	
分支：
		git branch命令查看当前分支：
		
		git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
		场景1： 创建dev分支，然后切换到dev分支  ： git checkout -b dev
		场景2： $ git branch dev	 --创建
				$ git checkout dev   --切换
		
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -D <name>	

解决冲突:
		查看分支合并图
		git log --graph --pretty=oneline --abbrev-commit
		
分支管理策略
		 git merge --no-ff -m "merge with no-ff" <branch>
		 准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward.Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息.

Bug分支	 
		git stash  ---提供了一个stash功能,以把当前工作现场“储藏”起来，等以后恢复现场后继续工作.
		现在用git status查看工作区，就是干净的
		
		场景 ：假定需要在master分支上修复，就从master创建临时分支
					git checkout master 		 --切换到主分支
					git checkout -b issue-101  	 -- 创建bug分支
			   现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交	
					 git add readme.txt 	
					 git commit -m "fix bug 101"
			   修复完成后，切换到master分支，并完成合并，最后删除issue-101分支	 
			   
					git checkout master 		 --切换到主分支
					git merge --no-ff -m "merged bug fix 101" issue-101
					git branch -d  issue-101
			   接着回到dev分支干活	
					git checkout dev
			   工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看
					git status 
					git stash list 
			   工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法	
			   一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
			   另一种方式是用git stash pop，恢复的同时把stash内容也删了
			   
			   可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：	
					git stash apply stash@{0}

Feature分支
		
多人协作
		
		
		抓取分支
				